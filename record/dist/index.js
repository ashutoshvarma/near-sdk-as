"use strict";
const as_1 = require("visitor-as/as");
const visitor_as_1 = require("visitor-as");
const utils_1 = require("visitor-as/dist/utils");
function isField(node) {
    return node.kind == as_1.NodeKind.FIELDDECLARATION;
}
function isInstanceField(node) {
    return isField(node) && node.is(as_1.CommonFlags.INSTANCE);
}
function getRecordId(element) {
    let decorator = (0, utils_1.getDecorator)(element, "record");
    if (decorator.args == null) {
        return element.name.text;
    }
    if (decorator.args.length > 1) {
        throw new Error(`record expects 0 or 1 argument but got ${decorator.args.length}`);
    }
    if (!decorator.args[0].isLiteralKind(as_1.LiteralKind.STRING)) {
        throw new Error("record expects a string argument");
    }
    return decorator.args[0].value;
}
class RecordDecorator extends visitor_as_1.ClassDecorator {
    constructor() {
        super(...arguments);
        this.pkDecoratorName = "primaryKey";
    }
    visitFieldDeclaration(node) {
        var _a;
        if (!node.name)
            return;
        if ((_a = node.decorators) === null || _a === void 0 ? void 0 : _a.find((d) => d.name.range.toString() === `@${this.pkDecoratorName}`)) {
            this.pkSmt = `return this.${node.name.text}.toString();`;
        }
    }
    visitMethodDeclaration(node) { }
    visitClassDeclaration(node) {
        const fields = node.members.filter(isInstanceField);
        if (fields.length === 0) {
            return;
        }
        console.log(fields.map(f => f.name.text));
        this.visit(fields);
        const name = (0, utils_1.getName)(node);
        const recordId = getRecordId(node);
        const methodsStr = getRecordMethods(recordId, name);
        if (this.pkSmt) {
            // we find some field with @primaryKey decorator
            methodsStr.push(getPkMethod(this.pkSmt));
        }
        else {
            if (!node.members.some((0, utils_1.isMethodNamed)("primaryKey"))) {
                throw new Error("record require either a field decorated with '@primaryKey' or method 'primaryKey(): string'");
            }
        }
        console.log(methodsStr.join("\n\n"));
        console.log("===================================================");
        methodsStr.forEach((e) => {
            const m = visitor_as_1.SimpleParser.parseClassMember(e, node);
            const mName = m.name.text;
            if (!node.members.some((0, utils_1.isMethodNamed)(mName))) {
                node.members.push(m);
            }
        });
    }
    get name() {
        return "record";
    }
}
const getPkMethod = (smt) => `
  primaryKey(): string {
    ${smt}
  }
`;
const getRecordMethods = (recordId, className) => [
    `
  static recordId(): string {
    return "${recordId}";
  }
  `,
    `
  exists(): bool {
    return ActiveRecord.getOrCreateRecord<${className}>(${className}.recordId()).exists(this.primaryKey());
  }
  `,
    `
  save(): void {
    ActiveRecord.getOrCreateRecord<${className}>(${className}.recordId()).add(
      this.primaryKey(),
      this
    );
  }
  `,
    `
  delete(): void {
    ActiveRecord.getOrCreateRecord<${className}>(${className}.recordId()).delete(this.primaryKey());
  }
  `,
    `
  static findOne(pk: string): ${className} | null {
    return ActiveRecord.getOrCreateRecord<${className}>(${className}.recordId()).findOne(pk);
  }
  `,
    `
  static find(pks?: string[]): Array<${className} | null> {
    return ActiveRecord.getOrCreateRecord<${className}>(${className}.recordId()).find(pks);
  }
  `,
    `
  static getAll(): ${className}[] {
    return ActiveRecord.getOrCreateRecord<${className}>(${className}.recordId()).getAll();
  }
 `,
];
module.exports = (0, visitor_as_1.registerDecorator)(new RecordDecorator());
//# sourceMappingURL=data:application/json;base64,